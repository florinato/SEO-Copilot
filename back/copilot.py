# copilot.py (Completo y Corregido - Asegurando Plantilla y Orden)
# M√≥dulo para el Agente Conversacional SEO-Copilot.
# Contiene la l√≥gica para generar sugerencias y regenerar contenido.

from typing import Any, Dict, List, Optional  # Importar List para type hinting

import content_generator
import database
import llm_client

DEFAULT_COPILOT_SUGGESTIONS_PROMPT_TEMPLATE = """
Eres SEO-Copilot, un asistente de IA experto en SEO y creaci√≥n de contenido. Tu tarea es analizar el art√≠culo proporcionado y listar DIRECTAMENTE SUGERENCIAS de mejora.

Aqu√≠ tienes el contexto del art√≠culo que el usuario est√° revisando:
T√≠tulo: {titulo}
Meta Descripci√≥n: {meta_description}
Tags: {tags}
Tema/Secci√≥n: {tema}
Score Promedio de Fuentes: {score_fuentes_promedio:.2f}
Cuerpo del Art√≠culo:
{body_preview} [...] ({body_length} caracteres)

Por favor, **analiza este art√≠culo** y proporciona **sugerencias de mejora concisas y directas** enfocadas en:
1.  **Calidad del Contenido:** ¬øEs claro, coherente, interesante? ¬øCubre bien el tema basado en el resumen de fuentes?
2.  **Optimizaci√≥n SEO On-Page:** ¬øQu√© tal est√°n el t√≠tulo, meta descripci√≥n y tags? ¬øHay oportunidades para mejorar la densidad o relevancia de palabras clave? ¬øLa estructura (H2, H3) es l√≥gica?
3.  **Estilo y Tono:** ¬øEl tono se ajusta a '{tono}' (si se especifica)? ¬øLa legibilidad es buena?

**Devuelve √öNICAMENTE las sugerencias de mejora, listadas directamente. No incluyas introducciones, res√∫menes del art√≠culo, ni texto explicativo antes o despu√©s de la lista.** Utiliza saltos de l√≠nea para separar cada sugerencia.

Sugestiones de mejora:
""" # <-- ESTA ES LA DEFINICI√ìN COMPLETA DEL STRING. Asegurarse que no hay errores de sintaxis.


# === Funci√≥n: Construir Prompt de Modificaci√≥n para el Generador ===
# DEBE ESTAR DEFINIDA ANTES de regenerate_article_content.
def build_modification_prompt_text(text_to_rewrite: str, instruction: str, article_title: str) -> str:
     """
     Construye el texto del prompt de modificaci√≥n para a√±adirlo al placeholder
     {modification_instructions} en el prompt principal del generador.
     """
     modification_prompt = f"""
Basado en el art√≠culo completo (cuerpo en Markdown) que se te proporcion√≥ anteriormente (usando las fuentes originales), reescribe o modifica el texto para cumplir con la siguiente instrucci√≥n:

Contexto del Art√≠culo:
T√≠tulo: {article_title}

Texto actual del art√≠culo (extra√≠do del Canvas para darte contexto):
{text_to_rewrite}

Instrucci√≥n para modificar:
{instruction}

Aplica la instrucci√≥n a todo el art√≠culo si es necesario, usando el texto actual como referencia de lo que el usuario quiere modificar. **Recuerda que debes devolver el art√≠culo COMPLETO en formato JSON.**

"""
     return modification_prompt


# === Funci√≥n: Generar Sugerencias Autom√°ticas (S√≠ncrona) ===
# ESTA FUNCI√ìN ES LA QUE FALLA.
def generate_article_suggestions(article_data: dict) -> str:
    """
    Genera sugerencias de mejora para un art√≠culo dado utilizando Gemini (de forma S√≠nCRONA).
    """
    print(f"\nüß† Copilot: Generando sugerencias para art√≠culo ID {article_data.get('id', 'N/A')} ('{article_data.get('titulo', 'Sin t√≠tulo')[:30]}...')")

    # Construir los valores para el formato
    # Usar .get() con valores por defecto que sean compatibles con el formato esperado
    # Y convertir tipos si es necesario.
    titulo = article_data.get('titulo', 'Sin t√≠tulo')
    meta_description = article_data.get('meta_description', '')
    tags_list = article_data.get('tags', [])
    if not isinstance(tags_list, list): tags_list = []
    tags = ", ".join(tags_list) # Este es el string unido

    tema = article_data.get('tema', 'Desconocido') # Default string

    # Manejar score_fuentes_promedio - Formato {score_fuentes_promedio:.2f} espera un n√∫mero.
    score_value = article_data.get('score_fuentes_promedio')
    # Si es None, proporcionar 0.0 para el formato flotante :.2f
    score_fuentes_promedio_for_format = score_value if (score_value is not None and isinstance(score_value, (int, float))) else 0.0 # <-- Proporcionar 0.0 si es None


    body_content = article_data.get('body', '')
    body_preview_length = 2000
    body_preview = body_content[:body_preview_length]
    body_length = len(body_content)

    # Obtener el tono del art√≠culo - Es string o None. Placeholder {tono}.
    # Si es None, proporcionar un default STRING.
    tono = article_data.get('tono_texto', 'neutral') # <-- Default string


    # === A√ëADIR PRINTS DE DEPURACI√ìN PARA LOS VALORES ===
    # Estos prints nos ayudar√°n a ver si alguno de estos valores es None justo antes de formatear.
    print(f"DEBUG_FORMAT_SUG: titulo: {titulo} ({type(titulo)})")
    print(f"DEBUG_FORMAT_SUG: meta_description: {meta_description} ({type(meta_description)})")
    print(f"DEBUG_FORMAT_SUG: tags: {tags} ({type(tags)})")
    print(f"DEBUG_FORMAT_SUG: tema: {tema} ({type(tema)})")
    print(f"DEBUG_FORMAT_SUG: score_fuentes_promedio_for_format: {score_fuentes_promedio_for_format} ({type(score_fuentes_promedio_for_format)})")
    print(f"DEBUG_FORMAT_SUG: body_preview: {body_preview[:100]}... ({type(body_preview)})")
    print(f"DEBUG_FORMAT_SUG: body_length: {body_length} ({type(body_length)})")
    print(f"DEBUG_FORMAT_SUG: tono: {tono} ({type(tono)})")
    # ==============================================


    try:
        # === VERIFICACI√ìN ADICIONAL DE LA PLANTILLA ===
        # Si la variable DEFAULT_COPILOT_SUGGESTIONS_PROMPT_TEMPLATE es None aqu√≠, es un error.
        # Esto no deber√≠a pasar si est√° definida correctamente al principio.
        if DEFAULT_COPILOT_SUGGESTIONS_PROMPT_TEMPLATE is None or not isinstance(DEFAULT_COPILOT_SUGGESTIONS_PROMPT_TEMPLATE, str):
             print(f"‚ùå‚ùå‚ùå ERROR GRAVE EN COPILOT.PY: Plantilla de sugerencias no es un string v√°lido. Es: {type(DEFAULT_COPILOT_SUGGESTIONS_PROMPT_TEMPLATE)} ‚ùå‚ùå‚ùå")
             return "Error interno: La plantilla de sugerencias no est√° cargada correctamente."
        # =============================================


        # === Usar .format() con los valores preparados ===
        # Si los prints de depuraci√≥n muestran valores correctos y la plantilla es string,
        # esta l√≠nea DEBER√çA funcionar. Si falla, el diccionario tiene el problema.
        copilot_prompt = DEFAULT_COPILOT_SUGGESTIONS_PROMPT_TEMPLATE.format(
            titulo=titulo,
            meta_description=meta_description,
            tags=tags,
            tema=tema,
            score_fuentes_promedio=score_fuentes_promedio_for_format, # Usar la variable ajustada
            body_preview=body_preview,
            body_length=body_length,
            tono=tono
        )

        # Llamar a Gemini usando llm_client (s√≠ncrono)
        ai_response = llm_client.generate_raw_content(copilot_prompt)

        print("‚úÖ Copilot: Sugerencias generadas por Gemini.")
        ai_response = ai_response.replace('```text', '').replace('```', '').strip()
        ai_response = ai_response.replace('```markdown', '').replace('```', '').strip()

        return ai_response # Retornar el string de sugerencias

    except Exception as e:
        print(f"‚ùå Copilot: Error al generar sugerencias: {str(e)}")
        # Si el error sigue siendo el TypeError, estos prints de depuraci√≥n nos dir√°n cu√°l valor es None o incorrecto
        return f"Error al generar sugerencias de la IA: {str(e)}"


# === Funci√≥n: Construir Prompt de Modificaci√≥n para el Generador ===
# DEBE ESTAR DEFINIDA ANTES de regenerate_article_content.
def build_modification_prompt_text(text_to_rewrite: str, instruction: str, article_title: str) -> str:
    """
    Construye el texto del prompt de modificaci√≥n para a√±adirlo al placeholder
    {modification_instructions} en el prompt principal del generador.
    """
    # Este es el texto que ir√° en el placeholder {modification_instructions}
    # dentro de DEFAULT_GENERATOR_PROMPT_TEMPLATE en content_generator.py
    modification_prompt = f"""
Basado en el art√≠culo completo (cuerpo en Markdown) que se te proporcion√≥ anteriormente (usando las fuentes originales), reescribe o modifica el texto para cumplir con la siguiente instrucci√≥n:

Contexto del Art√≠culo:
T√≠tulo: {article_title} # <-- Usamos el t√≠tulo como contexto tem√°tico

Texto actual del art√≠culo (extra√≠do del Canvas para darte contexto):
{text_to_rewrite}

Instrucci√≥n para modificar:
{instruction}

Aplica la instrucci√≥n a todo el art√≠culo si es necesario, usando el texto actual como referencia de lo que el usuario quiere modificar. **Recuerda que debes devolver el art√≠culo COMPLETO en formato JSON.**

"""
    return modification_prompt




# === FUNCI√ìN: Regenerar/Reescribir Contenido del Art√≠culo (S√≠ncrona) ===
# Esta funci√≥n orquesta la regeneraci√≥n usando content_generator.generate_seo_content
# DEBE ESTAR DEFINIDA DESPU√âS de build_modification_prompt_text.
def regenerate_article_content(article_id: int, instruction: str, current_body_text: str) -> Optional[Dict[str, Any]]:
    """
    Regenera el contenido de un art√≠culo bas√°ndose en una instrucci√≥n,
    reutilizando generate_seo_content con un prompt modificado.
    Obtiene el art√≠culo original para el contexto y sus FUENTES USADAS.

    Args:
        article_id (int): El ID del art√≠culo a regenerar.
        instruction (str): La instrucci√≥n del usuario para la modificaci√≥n.
        current_body_text (str): El texto actual del cuerpo del art√≠culo desde el Canvas.

    Returns:
        Optional[Dict[str, Any]]: Diccionario con el cuerpo reescrito { "rewritten_text": "..." }, o None si falla.
    """
    print(f"\nüß† Copilot: Iniciando regeneraci√≥n de contenido para art√≠culo ID {article_id}...")

    # 1. Obtener los datos del art√≠culo completo para contexto (titulo, tema, tono)
    article_data_for_context = database.get_generated_article_by_id(article_id)
    if not article_data_for_context:
         print(f"‚ùå Copilot: Art√≠culo ID {article_id} no encontrado para obtener contexto de regeneraci√≥n.")
         return None

    # Obtener el t√≠tulo y tema para usar en el prompt y cargar config
    article_title = article_data_for_context.get('titulo', 'Sin t√≠tulo')
    tema_articulo = article_data_for_context.get('tema', 'Desconocido')
    tono_original = article_data_for_context.get('tono_texto', 'neutral') # Asumimos que get_generated_article_by_id lo incluye


    # === 1b. OBTENER LAS FUENTES ORIGINALES USADAS PARA ESTE ART√çCULO ===
    # ¬°Este es el paso clave! Usamos la funci√≥n de database.py
    # Asumimos que database.get_sources_used_by_article retorna lista de dicts CON 'full_content'.
    print(f"üß† Copilot: Obteniendo fuentes usadas para art√≠culo ID {article_id}...")
    original_sources_used = database.get_sources_used_by_article(article_id)

    if not original_sources_used:
        print(f"‚ö†Ô∏è Copilot: No se encontraron fuentes usadas registradas para art√≠culo ID {article_id} O no tienen full_content. Regeneraci√≥n podr√≠a ser menos precisa o fallar.")
        # Si no hay fuentes, generate_seo_content fallar√° (porque espera la lista no vac√≠a).
        # Esto es un fallo cr√≠tico para la regeneraci√≥n contextualizada.
        return None # Fallar si no hay fuentes usadas con contenido
    # =============================================================


    # 2. Cargar la configuraci√≥n original del tema para obtener los par√°metros originales (longitud)
    config_tema_original = database.get_config(tema_articulo)
    longitud_original = config_tema_original.get('longitud_texto', 1500)


    # 3. Construir el texto del prompt de modificaci√≥n
    modification_prompt_text = build_modification_prompt_text(
        current_body_text,
        instruction,
        article_title
    )


    # 4. Llamar a content_generator.generate_seo_content
    # Pasar las fuentes USADAS, los par√°metros ORIGINALES, y el prompt de modificaci√≥n.
    print(f"üß† Copilot: Llamando a generate_seo_content para regenerar...")

    # === Llamar a generate_seo_content ===
    # Pasar la lista de fuentes USADAS (original_sources_used)
    regenerated_article_data = content_generator.generate_seo_content(
        tema_articulo, # Tema original del art√≠culo
        original_sources_used, # <-- PASAR LAS FUENTES USADAS AQU√ç
        longitud=longitud_original, # Longitud original
        tono=tono_original, # Tono original
        modification_prompt=modification_prompt_text # Pasar el prompt de modificaci√≥n
    )
    # ====================================


    if not regenerated_article_data:
         print(f"‚ùå Copilot: generate_seo_content fall√≥ durante la regeneraci√≥n para ID {article_id}.")
         return None


    print(f"‚úÖ Copilot: Regeneraci√≥n completada para art√≠culo ID {article_id}. Retornando nuevo body.")

    return {"rewritten_text": regenerated_article_data.get('body', '')}

def build_modification_prompt_text(text_to_rewrite: str, instruction: str, article_title: str) -> str:
    """
    Construye el texto del prompt de modificaci√≥n para a√±adirlo al placeholder
    {modification_instructions} en el prompt principal del generador.
    """
    # Este es el texto que ir√° en el placeholder {modification_instructions}
    # dentro de DEFAULT_GENERATOR_PROMPT_TEMPLATE en content_generator.py
    modification_prompt = f"""

--- INSTRUCCIONES ADICIONALES DE REVISI√ìN Y MODIFICACI√ìN ---

Ahora, bas√°ndote en el art√≠culo completo que generaste previamente (cuerpo en Markdown, usando las fuentes originales listadas arriba) y el contexto actual que te proporciono abajo, reescribe el art√≠culo completo para cumplir con las siguientes instrucciones.

**Importante:** El texto actual del art√≠culo (Canvas) se te proporciona abajo S√ìLO para que tengas contexto sobre la estructura y contenido actual y entiendas mejor a qu√© se refieren las instrucciones del usuario. **La reescritura debe ser una nueva s√≠ntesis coherente y fluida a partir de las fuentes originales, incorporando estas modificaciones.**

Contexto del Art√≠culo Original:
T√≠tulo: {article_title}

Texto actual del art√≠culo (referencia desde el editor del usuario):
---
{text_to_rewrite}
---

**Instrucci√≥n espec√≠fica para modificar/mejorar el art√≠culo:**
{instruction}

Aplica esta instrucci√≥n a todo el art√≠culo seg√∫n corresponda. Aseg√∫rate de que el art√≠culo reescrito sigue cumpliendo todos los requisitos de formato (JSON, encabezados, etc.) y SEO de las instrucciones principales, y que se basa en las fuentes originales.

--- FIN DE INSTRUCCIONES ADICIONALES ---

"""
    return modification_prompt
